name: Maze Generator Pipeline

on: push

jobs:
  checkLicense:
    name: Check for the Unity license
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} 
    steps:
      - name: Fail - No license
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
#   testRunner:
#     needs: checkLicense
#     name: Test All Modes
#     runs-on: ubuntu-latest
#     env:
#       UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}  
#     steps:
#     -   name: Checkout code
#         uses: actions/checkout@v2

#     -   name: Create LFS file list
#         run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

#     -   name: Restore LFS cache
#         uses: actions/cache@v4
#         id: lfs-cache
#         with:
#             path: .git/lfs
#             key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id')}}

#     -   name: Git LFS Pull
#         run: |
#             git lfs pull
#             git add .
#             git reset --hard

#     -   name: restore Library cache
#         uses: actions/cache@v4
#         with:
#             path: Library
#             key: Library-test-project
#             restore-keys: |
#                 Library-test-project-
#                 Library-

#     -   uses: game-ci/unity-test-runner@v4
#         id: testRunner
#         with:
#             testMode: all
    
#     -   uses: actions/upload-artifact@v4
#         with:
#             name: Test results (all modes)
#             path: ${{steps.testRunner.outputs.artifactsPath}}
  testAllModes:
      name: Test in ${{ matrix.testMode }}
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          projectPath:
            - test-project
          testMode:
            - playmode
            - editmode
            - standalone
      steps:
        - uses: actions/checkout@v4
          with:
            lfs: true
        - uses: actions/cache@v3
          with:
            path: ${{ matrix.projectPath }}/Library
            key: Library-${{ matrix.projectPath }}
            restore-keys: |
              Library-
        - uses: game-ci/unity-test-runner@v4
          id: tests
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            projectPath: ${{ matrix.projectPath }}
            testMode: ${{ matrix.testMode }}
            artifactsPath: ${{ matrix.testMode }}-artifacts
            githubToken: ${{ secrets.GITHUB_TOKEN }}
            checkName: ${{ matrix.testMode }} Test Results
            coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Test results for ${{ matrix.testMode }}
            path: ${{ steps.tests.outputs.artifactsPath }}
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Coverage results for ${{ matrix.testMode }}
            path: ${{ steps.tests.outputs.coveragePath }}

 